#include <Arduino.h>
#ifndef PROTOTYPE
#include "functionPrototype.h"
#endif

#ifndef MEMORY
#define MEMORY
#include <MemoryFree.h>
#endif

unsigned char perFormDriveCycle(CellParameters &parameters, CellMeasurement &measurement, ExperimentParameters &expParms,ChamberMeasurement &chmMeas, int sampleTime, unsigned long curTime)
{
  unsigned status = 0;//0 for not finsished, 1 for finished, 2 for stopped
  unsigned int cycle_size = expParms.samples;
  float drive_cycle[cycle_size] = {0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.048556726,0.735672814,2.548210162,3.13055682,1.786793932,0.56532239,0.01,0.01,0.01,0.01,0.01,0.01,0.118794845,1.13703841,1.870378822,1.522919427,2.000859901,3.558107546,2.181687369,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.396986155,0.212763911,0.01,0.095722047,1.523859516,3.050755401,3.358399533,2.990303339,2.560091071,1.021392291,0.01,0.01,0.01,0.01,0.01,1.480390582,2.286467179,1.351192823,0.01,0.01,0.01,0.593048271,2.087914955,2.383493575,1.363913936,0.473714025,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.024315137,0.23088346,0.446548524,0.820344702,1.118661528,1.747890363,3.036825384,3.794028318,2.463947746,0.01,0.01,0.01,0.239275391,1.724734105,1.779303904,0.606246455,0.01,0.01,0.01,0.01,0.87531152,1.177929147,1.042235582,1.516253996,2.178647644,2.101546346,1.460467148,0.01,0.01,0.01,0.01,0.01,0.01,0.291016605,0.520217704,0.475293017,0.751916391,0.962725793,0.608863437,0.518897274,0.530193126,0.214573468,0.450465695,1.5100537,1.992999546,0.936252316,0.01,0.01,0.023348602,0.01,0.01,0.01,0.430042639,0.571766515,0.01,0.01,0.07922746,0.632904979,0.531699742,0.01,0.01,0.01,0.072887943,0.3298229,0.089493308,0.102391386,0.32842951,0.01,0.01,0.01,0.01,0.097871025,0.002975475,0.01,0.01,0.267564236,0.377464307,0.107968358,0.01,0.026859172,0.210934362,0.514975901,0.88690728,0.936108682,0.573880675,0.313578561,0.444231656,0.620344776,0.667299764,0.58510169,0.331097084,0.770813855,1.759687682,1.39674938,0.499570534,0.56359083,0.809483205,0.842252173,0.029152288,0.01,0.01,0.2573755,1.018906357,1.397166809,1.335095893,1.308780404,1.799936176,1.844012715,1.599810668,1.418258382,0.504841233,0.01,0.01,0.01,0.01,0.188961147,0.457261602,0.990297897,1.050846616,0.832161895,1.708909584,3.359097292,4.204182461,3.781571023,3.381953911,2.587139096,0.706502748,0.01,0.01,0.272741782,1.086539793,0.884249534,0.5226689,0.603736201,0.845606695,0.883949505,0.966893574,1.081207644,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.182511973,0.716030213,0.694273615,0.472735779,0.558866515,1.242669971,1.695178712,1.723379222,2.418082817,2.582233967,2.087204407,2.601833455,2.765528643,2.121186587,1.878574539,1.262613315,0.01,0.01,0.01,0.01,0.39688189,0.642760767,0.576645659,0.785017505,0.535178688,0.093520347,0.245568957,0.609502789,0.168903761,0.063812334,0.754466782,0.970476442,0.876447757,0.838833741,0.356187829,0.01,0.01,0.01,0.01,0.01,1.147401617,2.018651461,2.507226557,2.242127288,1.341027194,0.993771458,1.063372122,1.101187204,0.910120072,0.841386061,0.610865964,0.187629943,0.480765406,1.244154955,1.208639979,0.344198532,0.01,0.01,0.01,0.01,0.01,1.392325421,2.673133987,0.771094096,0.01,0.01,0.01,0.01,0.01,0.01,0.345431531,0.224492167,0.068965201,0.914493251,2.022976858,3.034387996,3.363336934,3.961782585,5.240336239,3.94588382,1.277296445,0.01,0.01,0.01,0.01,0.01,0.267038032,0.470053061,0.124116918,0.01,0.667815961,1.55372197,1.524401151,0.355089438,0.01,0.01,0.01,0.01,0.044108428,0.01,0.050627595,0.65000917,1.05195512,1.222673708,1.262517254,0.985575947,0.732136897,0.053132832,0.01,0.01,0.01,0.01,0.01,0.01,0.304772313,0.543829271,0.107210516,0.01,0.01,0.014344028,0.440393364,0.603045316,0.157105613,0.221490154,1.109543754,1.732182884,1.533869058,0.952005053,0.818155276,1.00059519,0.922624454,0.897790113,0.971103697,0.97910952,1.073335492,1.509137341,1.872632419,1.102541187,0.01,0.01,0.01,0.628559084,1.464632255,1.582279597,1.453373269,1.110546322,1.011775223,1.402066747,1.235409324,0.344112123,0.199240386,0.58740435,0.796642115,0.951337116,0.233157369,0.01,0.01,0.01,0.331487521,1.071986288,0.989774141,0.305924437,0.136389053,0.254276475,0.01,0.01,0.190486059,3.389793865,5.770963386,5.999232327,5.11086255,2.027974018,0.01,0.01,0.183013878,1.613125227,1.216741671,0.149572281,0.01,0.01,0.01,0.01,0.01,0.156583729,0.966553839,0.958294194,1.651299591,3.308361961,4.509886507,3.468172406,2.122566533,2.112754388,1.595069944,0.296182216,0.290024145,1.502457815,1.694503626,1.074240373,0.65495184,0.01,0.01,0.01,0.01,0.01,1.822421503,3.690394759,4.781751468,3.53025069,0.817844561,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,1.187047292,1.220953586,0.308134753,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.037621739,0.212202637,0.346975201,0.814074056,1.491074362,1.531988016,1.15350254,0.977820703,0.59589343,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.000767057,0.000270152,0.15208288,1.162490202,1.209988293,0.01,0.01,0.111407616,0.980718059,1.208331159,0.58322154,0.510315319,0.862551189,0.834404343,0.869870092,0.81961844,0.332296669,0.01,0.01,0.01,0.01,0.01,0.376048056,1.107502728,0.607270898,0.01,0.01,0.232363102,0.287203937,1.094821869,1.791947551,0.669049567,0.262473515,0.786296503,0.58619478,0.038184743,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.133045718,0.662838538,1.52594144,2.694441966,1.180574158,0.01,0.01,0.585253081,1.423753292,1.349718215,0.907292501,0.138584929,0.01,0.01,0.01,0.01,0.939096514,0.482611135,0.01,0.01,0.01,0.01,0.01,0.01,0.383547688,0.807675028,1.043427254,1.101989742,0.804902848,0.636277103,0.936634935,1.332287864,1.378753473,1.014858287,1.119885359,1.41380829,0.754824219,0.851594015,2.555466831,3.054498306,1.250692259,0.3478009,0.36674573,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.144227386,0.257216163,0.492785489,1.226687252,1.885026738,1.765574165,1.306218662,1.127108386,1.340115129,1.681935789,1.762837437,1.642583688,1.752866421,1.748508116,1.254619202,1.17223676,1.711872185,1.99759158,1.670455546,0.437967361,0.01,0.01,0.373343734,0.692828191,0.603101163,1.057304025,1.791078057,1.908810869,2.329835,3.175429246};
  if (curTime > expParms.prevTime + sampleTime)
  {
    // for some reason whenever I am accessing drive_cycle[expParms.sampleIndicator] crashing
    // About segfaults -- just check the boundary values of array indices and you ought to be OK. If you're using pointers, then please be careful with pointer arithmetic.
    unsigned int indicator = expParms.sampleIndicator;
    indicator = indicator % cycle_size;//this is must to prevent segmentations error
    //Serial.println(indicator);
    //Serial.println(drive_cycle[indicator]);
    setDischargerCurrent(1, drive_cycle[indicator]);
    expParms.sampleIndicator += 1;
    //Serial.println(expParms.sampleIndicator);
    if (expParms.sampleIndicator >= expParms.samples)
    {
      //expParms.sampleIndicator = 0;
      status = 1;
    }
    expParms.prevTime = curTime;
  }
  measurement.current = getDischargerCurrent(parameters.cellId);
  chmMeas.avgHum = measureChamberAverageHumidity();
  chmMeas.avgTemp = measureChamberAverageTemperature();
  return status;
}